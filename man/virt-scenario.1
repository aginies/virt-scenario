'\" t
.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "" "" "" "" ""
.hy
.SH Name
.PP
virt-scenario - Create XML config and prepare host for a specific
scenario
.SH Goals
.PP
This is an \f[B]EXPERIMENTATION\f[R] project for SUSE ALP
OS (https://documentation.suse.com/alp/all/)
.PP
it prepares a libvirt XML guest configuration and the host to run a
customized guest.
Idea is to use multiple \f[B]templates\f[R] and concatenate them to
create the expected Guest XML file.
If Host need a custom setting it will also be done.
.PP
Customization to match a specific scenario is not graved in stone.
The idea is to prepare a configuration which should improved the usage
compared to a basic setting.
This will \f[B]NOT guarantee\f[R] that this is perfect as this higly
depends on your current system.
.PP
[IMAGE: image] [IMAGE: image] [IMAGE: image] [IMAGE: image]
.SH User Settings
.PP
User can set some parameter in the
\f[B]/etc/virt-scenario/virtscenario.yaml\f[R].
This will override the scenario settings, but a table will be displayed
showing the recommended settings VS the current one.
.PP
Example:
.IP
.nf
\f[C]
# WARNING: INCORRET PARAMATERS WILL LEAD TO BAD VM CONFIGURATION
# Dont change the section name
# This will overwrite scenario settings....
config:
  - path: /etc/virt-scenario
  - vm-config-store: \[ti]/.local/virtscenario/
emulator:
  - emulator: /usr/bin/qemu-system-x86_64
input:
  - keyboard: virtio
  - mouse: virtio
architecture:
  - arch: x86_64
STORAGE_DATA:
# some options are only available with qcow2 format and
# will be ignored in case of any other image format
  - disk_type: file
#  - disk_cache: none
  - disk_target: vda
  - disk_bus: virtio
  - path: /var/livirt/images
  - format: qcow2
# host side: qemu-img creation options (-o), qemu-img --help
  - unit: G
  - capacity: 20
  - cluster_size: 1024k
  - lazy_refcounts: on
# preallocation: off, metadata (qcow2), falloc, full
  - preallocation: off
  - compression_type: zlib
  - encryption: off
host_filesystem:
  - fmode: 644
  - dmode: 755
  - source_dir: /tmp
  - target_dir: /tmp/host
\f[R]
.fi
.PP
\f[B]/etc/virt-scenario/virthosts.yaml\f[R] is used to define an
Hypervisors list mostly for secure VM configuration.
.IP
.nf
\f[C]
localhost:
  url: qemu:///system
# Generate with \[aq]sevctl export --full filename.pdh\[aq] on the given host
  sev-cert: /path/to/host-cert-chain.pdh
\f[R]
.fi
.SH Usage
.SS Get it and use it
.SS From source code
.PP
\f[B]main.py\f[R] will create an \f[B]xml\f[R] based file on template
and validate it.
Second phase will prepare the host system and create the VM image file.
Currently \f[B]desktop\f[R], \f[B]computation\f[R] and
\f[B]securevm\f[R] are available.
.IP
.nf
\f[C]
git clone https://github.com/aginies/virt-scenario.git
cd virt-scenario/src
python3 -m virtscenario
> conf virtscenario.yaml
> desktop
\f[R]
.fi
.PP
Tool to select a firmware based on feature:
.IP
.nf
\f[C]
python3 -m virt_select_firmware
\f[R]
.fi
.PP
Tool to launch the VM from the config file generated by virt-scenario:
.IP
.nf
\f[C]
python3 -m virtscenario-launch
\f[R]
.fi
.SS From Package
.PP
Get the package for your Distribution and install it.
For openSUSE, SLE:
.IP \[bu] 2
devel stable
project (https://build.opensuse.org/package/show/Virtualization/virt-scenario)
.IP \[bu] 2
devel
unstable (https://build.opensuse.org/package/show/home:aginies/virt-scenario)
.SS Default configuration
.PP
The default configuration for VM definition are: * \f[B]disk path
image\f[R]: /var/libvirt/qemu * \f[B]arch\f[R]: x86_64 *
\f[B]machine\f[R]: pc-q35-6.2 * \f[B]boot_dev\f[R]: hd *
\f[B]emulator\f[R]: /usr/bin/qemu-system-x86_64 * \f[B]input\f[R]:
keyboard and mouse as virtio
.PP
They could be overwriten by the choosen scenario.
.PP
Depending on scenario the default will change to some other value.
.SS Interactive commands
.SS Hypervisor configuration
.IP \[bu] 2
\f[B]hvconf\f[R]: Load Hypervisor configuration
.IP \[bu] 2
\f[B]hvselect\f[R]: Set hypervisor for which VMs are configured
.IP \[bu] 2
\f[B]hvlist\f[R]: List available hypervisors
.IP \[bu] 2
\f[B]overwrite\f[R]: Force overwriting previous config
.IP \[bu] 2
\f[B]force_sev\f[R]: Force the extract of a localhost PDH file.
This is NOT secure as this file should be stored in a secure place!
Only for demo purpose
.SS Guest configuration
.IP \[bu] 2
\f[B]name\f[R]: Define a name for the VM
.IP \[bu] 2
\f[B]vcpu\f[R]: Choose how many VCPU
.IP \[bu] 2
\f[B]memory\f[R]: Choose the Memory size (in GiB)
.IP \[bu] 2
\f[B]vnet\f[R]: Virtual Network for the VM
.IP \[bu] 2
\f[B]machine\f[R]: Select the Machine type (from a list)
.IP \[bu] 2
\f[B]bootdev\f[R]: Select the boot dev (from a list)
.IP \[bu] 2
\f[B]diskpath\f[R]: Directory where to store disk image
.IP \[bu] 2
\f[B]conf\f[R]: Path to disk image (with completion)
.IP \[bu] 2
\f[B]cdrom\f[R]: File Path to CD/DVD installation media
.SS Generate the XML configuration and prepare the host
.IP \[bu] 2
\f[B]computation\f[R]: Create an XML configuration and host config to do
computation VM
.IP \[bu] 2
\f[B]desktop\f[R]: Create an XML configuration and host config for
Desktop VMU
.IP \[bu] 2
\f[B]securevm\f[R]: Create an XML configuration and host config for
Secure VM
.SS Others
.IP \[bu] 2
\f[B]shell\f[R]: Execution of a system command
.IP \[bu] 2
\f[B]info\f[R]: Get current host information about CPU and Memory
.SH Possible Scenarios
.SS Default Settings Comparison
.PP
.TS
tab(@);
lw(36.1n) cw(11.3n) cw(11.3n) cw(11.3n).
T{
Storage
Settings (https://www.qemu.org/docs/master/system/qemu-block-drivers.html)
T}@T{
Secure VM
T}@T{
Computation
T}@T{
Desktop
T}
_
T{
preallocation
T}@T{
metadata
T}@T{
off
T}@T{
metadata
T}
T{
encryption
T}@T{
on
T}@T{
off
T}@T{
off
T}
T{
disk_cache
T}@T{
writethrough
T}@T{
unsafe
T}@T{
none
T}
T{
lazy_refcounts
T}@T{
on
T}@T{
on
T}@T{
off
T}
T{
format
T}@T{
qcow2
T}@T{
raw
T}@T{
qcow2
T}
T{
disk bus
T}@T{
virtio
T}@T{
virtio
T}@T{
virtio
T}
T{
capacity
T}@T{
20G
T}@T{
20G
T}@T{
20G
T}
T{
cluster_size
T}@T{
1024k
T}@T{
NA
T}@T{
1024k
T}
.TE
.PP
.TS
tab(@);
lw(32.5n) cw(12.5n) cw(12.5n) cw(12.5n).
T{
Host Settings
T}@T{
Secure VM
T}@T{
Computation
T}@T{
Desktop
T}
_
T{
Transparent
HugePages (https://documentation.suse.com/sles/15-SP2/html/SLES-all/cha-tuning-memory.html#sec-tuning-memory-thp)
T}@T{
on
T}@T{
on
T}@T{
on
T}
T{
KSM (https://www.kernel.org/doc/html/latest/admin-guide/mm/ksm.html)
T}@T{
disable
T}@T{
enable
T}@T{
enable
T}
T{
KSM merge across (https://www.kernel.org/doc/Documentation/vm/ksm.txt)
T}@T{
disable
T}@T{
enable
T}@T{
enable
T}
T{
swappiness (https://www.kernel.org/doc/Documentation/vm/swappiness.txt)
T}@T{
0
T}@T{
0
T}@T{
35
T}
T{
IO
Scheduler (https://documentation.suse.com/sles/15-SP4/html/SLES-all/cha-tuning-storage.html#sec-tuning-storage-scheduler)
T}@T{
bfq
T}@T{
mq-deadline
T}@T{
mq-deadline
T}
.TE
.PP
.TS
tab(@);
lw(33.8n) cw(12.1n) cw(12.1n) cw(12.1n).
T{
Guest Settings
T}@T{
Secure VM
T}@T{
Computation
T}@T{
Desktop
T}
_
T{
CPU migratable (https://libvirt.org/kbase/launch_security_sev.html)
T}@T{
off
T}@T{
off
T}@T{
on
T}
T{
machine
T}@T{
pc-q35-6.2
T}@T{
pc-q35-6.2
T}@T{
pc-q35-6.2
T}
T{
watchdog (https://libvirt.org/formatdomain.html#watchdog-devices)
T}@T{
none
T}@T{
i6300esb poweroff
T}@T{
none
T}
T{
boot UEFI (https://libvirt.org/formatdomain.html#bios-bootloader)
T}@T{
auto
T}@T{
auto
T}@T{
auto
T}
T{
vTPM (https://libvirt.org/formatdomain.html#tpm-device)
T}@T{
tpm-crb 2.0
T}@T{
none
T}@T{
none
T}
T{
iothreads (https://libvirt.org/formatdomain.html#iothreads-allocation)
T}@T{
disable
T}@T{
4
T}@T{
4
T}
T{
video (https://libvirt.org/formatdomain.html#video-devices)
T}@T{
qxl
T}@T{
qxl
T}@T{
virtio
T}
T{
network (https://libvirt.org/formatdomain.html#network-interfaces)
T}@T{
e1000
T}@T{
virtio
T}@T{
e1000
T}
T{
keyboard (https://libvirt.org/formatdomain.html#input-devices)
T}@T{
ps2 (will be disable in the futur)
T}@T{
virtio
T}@T{
virtio
T}
T{
mouse
T}@T{
disable
T}@T{
virtio
T}@T{
virtio
T}
T{
on_poweroff (https://libvirt.org/formatdomain.html#events-configuration)
T}@T{
destroy
T}@T{
restart
T}@T{
destroy
T}
T{
on_reboot
T}@T{
destroy
T}@T{
restart
T}@T{
restart
T}
T{
on_crash
T}@T{
destroy
T}@T{
restart
T}@T{
destroy
T}
T{
suspend_to_mem (https://libvirt.org/formatdomain.html#power-management)
T}@T{
off
T}@T{
off
T}@T{
on
T}
T{
suspend_to_disk
T}@T{
off
T}@T{
off
T}@T{
on
T}
T{
features (https://libvirt.org/formatdomain.html#hypervisor-features)
T}@T{
acpi apic pae
T}@T{
acpi apic pae
T}@T{
acpi apic pae
T}
T{
host fs (https://libvirt.org/formatdomain.html#filesystems) fmode,
dmode, source_dir, target_dir
T}@T{
NA
T}@T{
NA
T}@T{
644 755 /tmp/ /tmp/host
T}
.TE
.PP
.TS
tab(@);
lw(32.5n) cw(12.5n) cw(12.5n) cw(12.5n).
T{
SEV
T}@T{
Secure VM
T}@T{
Computation
T}@T{
Desktop
T}
_
T{
kvm SEV (https://libvirt.org/kbase/launch_security_sev.html)
T}@T{
mem_encrypt=on kvm_amd sev=1 sev_es=1
T}@T{
NA
T}@T{
NA
T}
T{
sec cbitpos
T}@T{
auto
T}@T{
NA
T}@T{
NA
T}
T{
sec reducedPhysBits
T}@T{
auto
T}@T{
NA
T}@T{
NA
T}
T{
sec policy
T}@T{
auto
T}@T{
NA
T}@T{
NA
T}
.TE
.SS Not yet ready
.IP \[bu] 2
Testing an OS
.IP \[bu] 2
Easy migration of VM
.IP \[bu] 2
Soft RT VM (latency improvments)
.SH Devel Information
.PP
This is still \f[B]WIP\f[R], but the code is relatively stable.
.SS Devel planning / TODO
.IP \[bu] 2
[STRIKEOUT:mechanism to create the Guest XML file from template]
.IP \[bu] 2
[STRIKEOUT:define all scenarios (list)]
.IP \[bu] 2
[STRIKEOUT:post customization of XML config]
.IP \[bu] 2
[STRIKEOUT:show host configuration]
.IP \[bu] 2
[STRIKEOUT:implement interactive shell]
.IP \[bu] 2
[STRIKEOUT:check if running inside a container (for host
configuration)\&...]
.IP \[bu] 2
[STRIKEOUT:do more configuration on the Host side]
.IP \[bu] 2
[STRIKEOUT:create needed files on host: images, network definition,
etc\&...]
.IP \[bu] 2
[STRIKEOUT:define conflict/compatibility between scenarios (is this
still needed?)]
.IP \[bu] 2
improve customization based on scenario (need to get some QA on
this\&...)
.SS Code
.PP
Source (https://github.com/aginies/virt-scenario)
.PP
Issues (https://github.com/aginies/virt-scenario/issues)
.SS Class / Functions
.PP
All scenarios are define in the \f[B]Scenarios\f[R] class.
It can do direct configuration calling \f[B]BasicConfiguration.XXX\f[R]
or \f[B]ComplexConfiguration.XXX\f[R], or request a specific features
calling \f[B]Features.XXX\f[R].
User setting always overwrite any values set automatically by scenario.
.PP
Scenarios()
.IP
.nf
\f[C]
class Scenarios()
    -> BasicConfiguration.XXX
    -> ComplexConfiguration.XXX
    -> Features.XXX
\f[R]
.fi
.PP
Features()
.IP
.nf
\f[C]
class Features()
    -> XXX_perf() -> BasicConfiguration.XXX
                  -> ComplexConfiguration.XXX
\f[R]
.fi
.PP
BasicConfiguration()
.IP
.nf
\f[C]
class BasicConfiguration()
    name(self, name)
    vcpu(self, vcpu)
    cpumode_pass(self, migratable, extra)
    power(self, suspend_to_mem, suspend_to_disk)
    audio(self, model)
    input(self, inputtype, bus)
    usb(self, model)
    watchdog(self, model, action)
    emulator(self, emulator)
    memory(self, unit, max_memory, memory)
    osdef(self, arch, machine, boot_dev)
    ondef(self, on_poweroff, on_reboot, on_crash)
    features(self, features)
    clock(self, clock_offset, clock)
    iothreads(self, iothreads)
    security_f(self, sectype, secdata)
    video(self, model_type)
\f[R]
.fi
.PP
ComplexConfiguration()
.IP
.nf
\f[C]
ComplexConfiguration()
    disk(self, disk)
    network(self, mac, network, intertype, iommu)
    access_host_fs(self)
    tpm(self, tpm_model, tpm_type, device_path)
    tpm_emulated(self, tpm_model, tpm_type, version)
    access_host_fs(self, fmode, dmode, source_dir, target_dir)
\f[R]
.fi
.SS Templates definition
.PP
All templates are in the python lib \f[B]virt-scenario/template.py\f[R]
file.
.SS Files (virtscenario)
.IP \[bu] 2
virtscenario.yaml: user setting (overwrite scenario settings)
.IP \[bu] 2
virthosts.yaml Hypervisors list and settings
.IP \[bu] 2
libvirt.py Wrapper for getting libVirt domain capabilities
.IP \[bu] 2
firmware.py Select the firmware with the required feature-set
.IP \[bu] 2
sev.py Get parameters for configuring an SEV or SEV-ES VM and do
detaction
.IP \[bu] 2
template.py libvirt XML template definition
.IP \[bu] 2
scenario.py different call to create the XML based on the selected
scenario
.IP \[bu] 2
configuration.py create the dict with data to file the template
.IP \[bu] 2
features.py prepare some features for the VM
.IP \[bu] 2
host.py create the storage and prepare the host
.IP \[bu] 2
guest.py create dict to file all the templates
.IP \[bu] 2
immutable.py Immutable data (to be removed when implementation will be
done\&...)
.IP \[bu] 2
qemulist.py provide list of available options in qemu and some default
path
.IP \[bu] 2
util.py internal needed functions
.IP \[bu] 2
main.py launch the tool and create the final XML file and host
configuration
.IP \[bu] 2
hypervisors.py list, select, connect to an hypervisor (or any other HV
action)
.IP \[bu] 2
configstore.py Guest configuration store (used mostly for Confidential
computing)
.SS Host configuration
.IP \[bu] 2
check CPU flag: sev, sev-es, pdpe1gb, pse
.IP \[bu] 2
check SEV on the system and libvirt enablement
.IP \[bu] 2
enable an AMD SEV system
.IP \[bu] 2
generate SEV attestation and update VM XML
.IP \[bu] 2
configure HugePages and THP
.IP \[bu] 2
enable/disable KSM
.IP \[bu] 2
adjust swappiness
.IP \[bu] 2
manage IO scheduler
.SS Possible Guest VM Features
.IP \[bu] 2
CPU performance
.IP \[bu] 2
System features
.IP \[bu] 2
Security
.IP \[bu] 2
Memory performance
.IP \[bu] 2
Storage performance
.IP \[bu] 2
Video (virtio or others)
.IP \[bu] 2
Network performance
.IP \[bu] 2
Clock performance
.IP \[bu] 2
Using host hardware
.IP \[bu] 2
Access host OS filesystem
.IP \[bu] 2
AMD SEV
.IP \[bu] 2
select right firmware for VM guest
.SS Stuff currently immutable
.PP
This is currently not changeable using the template, this needs to be
adjusted in the futur (or not\&...): * console_data * channel_data *
memballoon_data * rng_data * metadata_data * only support 1 disk per VM
.SH Authors
.PP
Written by Antoine Ginies
.PP
Contributors: Joerg Roedel
